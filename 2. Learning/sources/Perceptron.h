#ifndef PERCEPTRON_H
#define PERCEPTRON_H
#include "Modules.h"

/*
    Single-Layer Perceptron class to simulate logic gates.
    This is a sub-class of Module and has other Modules as member variable.
*/
class Perceptron : public Module {
private:
    // Sequence of modules that consist a perceptron.
    std::vector<Module*> modules;
    int inputDim;

public:
    // Create a perceptron which get n-dimensional inputs and give 1 or 0 output.
    Perceptron(int inputDim);

    // In destructor, delete inner modules which were dynamically allocated.
    ~Perceptron();

    // Get the number of input dimensions of this perceptron.
    int getInputSize();
    // Get the number of output dimensions of this perceptron (=1).
    int getOutputSize();

    // Calculate output of a logic gate.
    // Internally, this function is implemented by calling getOutput of inner Modules repeatedly.
    std::vector<double> getOutput(std::vector<double>& inputs);

    // Update learnable parameters(weights) with gradient vector which is generated by Error function.
    std::vector<double> doBackpropagation(std::vector<double>& upperGradients, double learningRate);
};

#endif