#ifndef MLP_H
#define MLP_H
#include "Modules.h"

/*
    Multi-Layer Perceptron class.
    This is a sub-class of Module and has other Modules as member variable.
*/
class MLP : public Module {
private:
    // Sequence of modules that consist a perceptron.
    std::vector<Module*> modules;
    int inputDim, outputDim;

public:
    // Create a perceptron with multiple layers.
    MLP(const int layers, const int nodesPerLayer[]);

    // In destructor, delete inner modules which were dynamically allocated.
    ~MLP();

    // Get the number of input dimensions of this perceptron.
    int getInputSize();
    // Get the number of output dimensions of this perceptron.
    int getOutputSize();

    // Calculate output of this perceptron.
    // Internally, this function is implemented by calling getOutput of inner Modules repeatedly.
    std::vector<double> getOutput(std::vector<double>& inputs);

    // Update learnable parameters(weights) with gradient vector which is generated by Error function.
    std::vector<double> doBackpropagation(std::vector<double>& upperGradients, double learningRate);

    // Save learnable weights to given directory.
    bool saveWeights(std::string path);
};

#endif